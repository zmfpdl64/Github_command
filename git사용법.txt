git config --global gui.encoding utf-8
//gui 한글 깨짐 해결

git config --list 
모든 설정 확인 가능

git config --global -e
터미널에서 설정 확인

git config --global core.editor "code"
//vsc 에디터에서 설정 확인

git config --global core.editor "code --wait"
//에디터 종료 전까지 터미널 대기

git config --global user.name "woojin"
//전역 변수 설정

git config --global user.email "woojin1234@naver.com"

git config user.name
//내 이름 출력

git config --global core.autocrlf true
//윈도우 환경에서 줄바꿈 문자열을 관리해준다. \r\n

git config --global core.autocrlf input
//맥 환경에서 \n 사용

git status

git config --global alias.st status
git st

git config --h
명령어를 확인할 수 있다.


git의 구조

1. working directory
1.1 untracked
새로 만들어진 파일

1.2 tracked
기존에 있던 파일
1.2.1 unmodified
수정이 되지 않은 파일
1.2.2 modified
수정이 된 파일

git add .->

2. staging area


git commit -m "" ->
3. .git directory

1,2,3은 내 컴퓨터상에만 저장할 수 있다.

그렇기에 remote 원격 저장소에 저장하게 된다.



git add . //현재 모든 파일을 올리겠다.
//staging area로 옮기는 과정

git add a.txt //a.txt를 스테이징 에리어로 옮긴다.

git rm --cached *
//git add한 데이터를 모두 삭제한다.

추가하고 싶지 않는 파일을 .gitignore에 추가한다.
*.log
Build/*.log

git diff //이전 버전과 달라진 내용을 출력한다.

git diff --staged //스테이징 파일을 볼 수 있다.

git diff --cached //스테이지랑 동의어로 사용한다.

버전을 만들 때 commit을 사용한다.

git log //커밋한 로그를 확인할 수 있다.



특정 커밋으로 돌아가는 방법
reset  VS revert

reset 특정 시점 이후의 코드를 제거한다.

git reset --hard (특정 해쉬)

git reset --hard //현재 속해있는 커밋으로 초기화

revert는 는 특정 시점에 코드한것만 제거할 수 있다.

git revert (특정 해쉬)
//특정해쉬 파일, 코드를 제거한다.

특정 해쉬의 시점 이후에 코드를 수정했을 경우
버전 충돌이 일어난다.
그러면 충돌되는 파일을 삭제하고 다시 revert를 실행해야한다.

git revert --no-commit (특정 해쉬)
//자동으로 커밋되는 revert를 커밋을 미룬다.


treesource 사용하기

add -> commit -> push를 버튼을 눌러 사용이 가능하다.

특정 시점의 커밋을 오른쪽 클릭으로
커밋 되돌리기를 사용하면 revert와 같은 효과를 갖는다.



branch: 분기된 가지(다른 차원)

프로젝트를 하나 이상의 모습으로 관리해야할 때
예) 실배포용, 테스트서버용, 새로운 시도용

여러 작업들이 각각 독립되어 진행될 때
예) 신기능, 1. 신기능, 2, 코드개선, 3. 긴급수정

git branch (name)
//name의 브랜치를 생성한다.

git branch
//현재의 브랜치들을 볼 수 있다.

git switch -c (name) (git checkout -b (name))
//브랜치 생성과 동시에 이동하기
//checkout을 사용했지만 현재 기능은 switch로 사용한다.

git branch -d (name)
//브랜치를 삭제한다.

git branch -m (name) (change_name)
// name -> change_name 으로 변경한다.

git log
//해당 브랜치의 로그만 남는다.

git log --all --decorate --oneline --graph
//터미널 창에서 branch의 구조를 시각화해서 볼 수 있다.


여러개의 브랜치를 합치는 방법

Merge Vs Rebase

Merge
메인 브랜치에 다른 브랜치를 합치는 방식이며

git merge (name)
//mac의 경우 :wq를 입력해줘야 한다.
//main브랜치에서 name브랜치를 합친다.

merge는 reset을 이용하여 과거의 상태로 되돌릴 수 있다.


Rebase
메인 브랜치에 다른 브랜치를 추가하는 방식이다.

git rebase (name)
//name브랜치를 현재의 브랜치를 연결한다.

이후 헤드를 일치 시켜줘야한다.
git merge (name)
//main Head와 name Head를 일치시킨다.
//그러면 main에도 name 브랜치의 작업이 적용된다.

git branch -d (name)
//rebase한 브랜치 삭제

차이점:
히스토리 관리에서 큰차이가 있다.
rebase를 수행하면 히스토리가 깔끔하게 한줄로 정리되지만

merge를 수행할 경우 여러갈래의 branch가 존재하기 때문이다.



충돌 해결하기!!

병합을 하다가 main 브랜치와 name 브랜치가 충돌하게 된다면
간단한 것은 vcs에서 선택하라는 메시지가 출력되고

만약 merge를 중단하고 싶으면
git merge --abort
//merge가 중단되고 main브랜치로 이동한다.

git add .
git commit
//자동으로 commit메시지가 작성된다. merge


rebase를 사용한 충돌해결

git rebase --abort
//충돌 해결이 어려울 경우

git rebase --continue
//충돌이 추가적으로 일어날 수 있으므로
//rebase가 완료될때까지 수행한다.

git switch main

git merge (name)
//연결 완료

git branch -d (name)
//브랜치 삭제

브랜치를 SourceTree로 관리하기

브랜치 버튼을 눌러 생성할 수 있다.


깃허브 사용방법

아이디 가입하기

setting -> Developer settings -> access tokens를 생성한다.
 -> 토큰에 권한을 설정한다. -> 토큰 생성

 매번 토큰을 입력하기 어렵기 때문에

 자격 증명 관리자 -> windows 자격 증명 -> git https://github.com
 -> 사용자 이름과, token을 입력해준다.

 소스트리에 계정을 추가한다.
 인증에서 github.com에서 token과 정보를 입력한다.



 새로운 레포지토리 생성하기
 new repository를 생성하고

 권한
 public vs private

 
 다른사람과 공유하기 위한 세팅

 세팅 -> manage access -> 팀원 추가(github email)
 
 내 컴퓨터에서 깃 폴더 생성

 새롭게 저장소 생성
git init
git add README.md
git commit -m "first commit"
git branch -M main
// master 브랜치의 이름을 main으로 변경
git remote add origin (깃허브 저장소 url)
git push -u origin main 
//메인 원격저장소에 저장한다.
//u 옵션은 기본 저장소를 설정할 때 사용한다.


 기존 저장소 이용
 git remote add origin (깃허브 저장소 url)
 //origin은 원격저장소의 이름으로 변경가능하다.
 git branch -M main
 git push -u origin main


동료의 파일을 다운받을 때 사용하는 방법
git clone (깃허브 url주소)
//해당 프로그램과 git 관리 내역까지 불러온다.

git log
//clone한 프로젝트의 로그도 확인이 가능하다.



Push Pull 사용하는 방법

git push
//main branch에 커밋한 정보들이 업데이트된다.

git pull
//동료가 push한 data를 당겨와 내 프로젝트에 fetch 된다.

다른 원격저장소에서 불러오기
git pull origin (name)

주의사항
하나의 브랜치에서는 하나의 원격 저장소에
push가 가능하다.

하지만 충돌이 일어날 수 있다.
동료가 먼저 PUSH를 하게 되면 충돌이 일어나기 때문에
해결할 수 있는 방법은 2가지가 있다.

1. git pull --no-rebase
//local의 저장소와 remote의 저장소가
//2갈래로 갈라져 다시 병합된다.

2. git pull --rebase
//동료의 code가 내 코드 보다 먼저 rebase된 후
//내가 추가한 코드를 리베이스 한다.

주의사항
rebase는 협업할때는 사용하면 매우 번거롭게 작업이 될 수 있다.
그렇기에 협업상황에서는 merge를 사용하는것이 더 맞다.

하지만 pull할때의 rebase를 사용하는것은 괜찮다.

협업관계에서 상대방을 무시하고 pull없이 push하는 방법
git push --force
//사용이 거의 금지되는 명령어

git fetch
//원격 저장소의 변경사항 확인

git push (원격 이름) --delete (원격 브랜치명)

new test message
new test message2
new test message3
